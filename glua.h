/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 13 "lua.go"






//#cgo darwin,!llua LDFLAGS: -L${SRCDIR}/libs/macos -llua -lm -fPIC


#include <lua.h>
#include <lauxlib.h>
#include <stdlib.h>
extern int l_init(lua_State* L);
extern int l_poll(lua_State* L);
extern int l_disp(lua_State* L);

static int c_luaopen_glua(lua_State* L) {
    static const struct luaL_Reg nativeFuncLib [] = {
         {"init", l_init},
         {"poll", l_poll},
         {"disp", l_disp},
         {NULL, NULL}
    };
    luaL_newlib(L, nativeFuncLib);
    return 1;
}
#define MT_GOFUNCTION "Lua.GoFunction"
extern int golua_callgofunction(lua_State *L, int ud);
static void *testudata(lua_State *L, int ud, const char *tname) {
    void *p = lua_touserdata(L, ud);
    if (p != NULL) {
        if (lua_getmetatable(L, ud)) {
            luaL_getmetatable(L, tname);
            if (!lua_rawequal(L, -1, -2)) {
                p = NULL;
            }
            lua_pop(L, 2);
            return p;
        }
    }
    return NULL;
}
static int callback_function(lua_State* L) {
    unsigned int *fid = testudata(L, 1, MT_GOFUNCTION);
    if (fid == NULL) return 0;

    lua_remove(L,1);
    return golua_callgofunction(L, *fid);
}
static void clua_initstate(lua_State* L) {
    luaL_newmetatable(L, MT_GOFUNCTION);

    lua_pushliteral(L,"__call");
    lua_pushcfunction(L,&callback_function);
    lua_settable(L,-3);
}
static void clua_pushgofunction(lua_State* L, unsigned int fid) {
    unsigned int* fidptr = (unsigned int *)lua_newuserdata(L, sizeof(unsigned int));
    *fidptr = fid;
    luaL_getmetatable(L, MT_GOFUNCTION);
    lua_setmetatable(L, -2);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern GoInt luaopen_glua(lua_State* L);
extern int l_init(lua_State* L);
extern int golua_callgofunction(lua_State* L, int id);
extern int l_poll(lua_State* L);
extern int l_disp(lua_State* L);

#ifdef __cplusplus
}
#endif
